//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */

// @ts-nocheck

import { BaseApi } from "./BaseApi";

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class  extends BaseApi {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        super();

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? this.getBaseUrl("");

    }

    /**
     * Get all users
     * @return success response
     */
    users( cancelToken?: CancelToken): Promise<GetUsersResponse> {
        let url_ = this.baseUrl + "/api/users";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUsers(_response));
        });
    }

    protected processUsers(response: AxiosResponse): Promise<GetUsersResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetUsersResponse.fromJS(resultData200);
            return Promise.resolve<GetUsersResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetUsersResponse>(null as any);
    }

    /**
     * Get user by id
     * @param id id
     * @return success response
     */
    users2(id: number, cancelToken?: CancelToken): Promise<GetUserResponse> {
        let url_ = this.baseUrl + "/api/users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUsers2(_response));
        });
    }

    protected processUsers2(response: AxiosResponse): Promise<GetUserResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetUserResponse.fromJS(resultData200);
            return Promise.resolve<GetUserResponse>(result200);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ErrorResponse.fromJS(resultData404);
            return throwException("not found", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetUserResponse>(null as any);
    }

    /**
     * Signup user
     * @param body Signup request
     * @return success response
     */
    signup(body: SignUpRequest, cancelToken?: CancelToken): Promise<SuccessResponse> {
        let url_ = this.baseUrl + "/api/users/signup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSignup(_response));
        });
    }

    protected processSignup(response: AxiosResponse): Promise<SuccessResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
            result201 = SuccessResponse.fromJS(resultData201);
            return Promise.resolve<SuccessResponse>(result201);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("bad request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SuccessResponse>(null as any);
    }

    /**
     * Signin user
     * @param body Signin request
     * @return success response
     */
    signin(body: SignInRequest, cancelToken?: CancelToken): Promise<SignInResponse> {
        let url_ = this.baseUrl + "/api/users/signin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSignin(_response));
        });
    }

    protected processSignin(response: AxiosResponse): Promise<SignInResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SignInResponse.fromJS(resultData200);
            return Promise.resolve<SignInResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("bad request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SignInResponse>(null as any);
    }

    /**
     * Logout user
     * @return success response
     */
    logout( cancelToken?: CancelToken): Promise<SuccessResponse> {
        let url_ = this.baseUrl + "/api/users/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processLogout(_response));
        });
    }

    protected processLogout(response: AxiosResponse): Promise<SuccessResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SuccessResponse.fromJS(resultData200);
            return Promise.resolve<SuccessResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SuccessResponse>(null as any);
    }
}

/** TO COPY IN EACH RESPONSE FILE */
export class BaseResponse implements IBaseResponse {
    /** success */
    success!: boolean;
    /** statusCode */
    statusCode!: number | undefined;
    /** result */
    result!: any | undefined;

    [key: string]: any;

    constructor(data?: IBaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            this.result = _data["result"];
        }
    }

    static fromJS(data: any): BaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        data["result"] = this.result;
        return data;
    }
}

/** TO COPY IN EACH RESPONSE FILE */
export interface IBaseResponse {
    /** success */
    success: boolean;
    /** statusCode */
    statusCode: number | undefined;
    /** result */
    result: any | undefined;

    [key: string]: any;
}

/** SuccessReponse */
export class SuccessResponse implements ISuccessResponse {
    /** success */
    success!: boolean;
    /** statusCode */
    statusCode!: number | undefined;

    [key: string]: any;

    constructor(data?: ISuccessResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): SuccessResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SuccessResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        return data;
    }
}

/** SuccessReponse */
export interface ISuccessResponse {
    /** success */
    success: boolean;
    /** statusCode */
    statusCode: number | undefined;

    [key: string]: any;
}

/** ErrorResponse */
export class ErrorResponse implements IErrorResponse {
    /** success */
    success!: boolean;
    /** error */
    error!: string | undefined;
    /** statusCode */
    statusCode!: number | undefined;

    [key: string]: any;

    constructor(data?: IErrorResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.success = _data["success"];
            this.error = _data["error"];
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): ErrorResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["success"] = this.success;
        data["error"] = this.error;
        data["statusCode"] = this.statusCode;
        return data;
    }
}

/** ErrorResponse */
export interface IErrorResponse {
    /** success */
    success: boolean;
    /** error */
    error: string | undefined;
    /** statusCode */
    statusCode: number | undefined;

    [key: string]: any;
}

export class GetUser implements IGetUser {
    /** id */
    id!: number;
    /** name */
    name!: string;
    /** email */
    email!: string;

    [key: string]: any;

    constructor(data?: IGetUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): GetUser {
        data = typeof data === 'object' ? data : {};
        let result = new GetUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        return data;
    }
}

export interface IGetUser {
    /** id */
    id: number;
    /** name */
    name: string;
    /** email */
    email: string;

    [key: string]: any;
}

export class GetUserResponse implements IGetUserResponse {
    /** success */
    success!: boolean;
    /** statusCode */
    statusCode!: number | undefined;
    /** result */
    result!: GetUser | undefined;

    [key: string]: any;

    constructor(data?: IGetUserResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            this.result = _data["result"] ? GetUser.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetUserResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetUserResponse {
    /** success */
    success: boolean;
    /** statusCode */
    statusCode: number | undefined;
    /** result */
    result: GetUser | undefined;

    [key: string]: any;
}

export class GetUsersResponse implements IGetUsersResponse {
    /** success */
    success!: boolean | undefined;
    /** statusCode */
    statusCode!: number | undefined;
    /** result */
    result!: GetUser[] | undefined;

    [key: string]: any;

    constructor(data?: IGetUsersResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(GetUser.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetUsersResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetUsersResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetUsersResponse {
    /** success */
    success: boolean | undefined;
    /** statusCode */
    statusCode: number | undefined;
    /** result */
    result: GetUser[] | undefined;

    [key: string]: any;
}

/** Request for sign up */
export class SignUpRequest implements ISignUpRequest {
    /** First name */
    firstName!: string;
    /** Last name */
    lastName!: string;
    /** Username */
    username!: string;
    /** Email */
    email!: string;
    /** Password */
    password!: string;

    [key: string]: any;

    constructor(data?: ISignUpRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.username = _data["username"];
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): SignUpRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SignUpRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["username"] = this.username;
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

/** Request for sign up */
export interface ISignUpRequest {
    /** First name */
    firstName: string;
    /** Last name */
    lastName: string;
    /** Username */
    username: string;
    /** Email */
    email: string;
    /** Password */
    password: string;

    [key: string]: any;
}

/** Request to sign in */
export class SignInRequest implements ISignInRequest {
    /** The username */
    username!: string;
    /** The password */
    password!: string;

    [key: string]: any;

    constructor(data?: ISignInRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): SignInRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SignInRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

/** Request to sign in */
export interface ISignInRequest {
    /** The username */
    username: string;
    /** The password */
    password: string;

    [key: string]: any;
}

export class SignIn implements ISignIn {
    /** The id of the user */
    id!: number | undefined;
    /** The username of the user */
    username!: string | undefined;
    /** The email of the user */
    email!: string | undefined;

    [key: string]: any;

    constructor(data?: ISignIn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.username = _data["username"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): SignIn {
        data = typeof data === 'object' ? data : {};
        let result = new SignIn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["username"] = this.username;
        data["email"] = this.email;
        return data;
    }
}

export interface ISignIn {
    /** The id of the user */
    id: number | undefined;
    /** The username of the user */
    username: string | undefined;
    /** The email of the user */
    email: string | undefined;

    [key: string]: any;
}

/** Response to sign in */
export class SignInResponse implements ISignInResponse {
    /** success */
    success!: boolean | undefined;
    /** statusCode */
    statusCode!: number | undefined;
    /** result */
    result!: SignIn | undefined;

    [key: string]: any;

    constructor(data?: ISignInResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            this.result = _data["result"] ? SignIn.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SignInResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SignInResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

/** Response to sign in */
export interface ISignInResponse {
    /** success */
    success: boolean | undefined;
    /** statusCode */
    statusCode: number | undefined;
    /** result */
    result: SignIn | undefined;

    [key: string]: any;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}