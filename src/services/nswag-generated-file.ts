//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */

// @ts-nocheck

import { BaseApi } from "./BaseApi";

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class ChatsRepository extends BaseApi {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        super();

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? this.getBaseUrl("");

    }

    /**
     * Get messages
     * @param makerId (optional) makerId
     * @return success response
     */
    messagesGET(makerId: number | undefined, signal?: AbortSignal): Promise<GetMessagesResponse> {
        let url_ = this.baseUrl + "/api/chats/messages?";
        if (makerId === null)
            throw new Error("The parameter 'makerId' cannot be null.");
        else if (makerId !== undefined)
            url_ += "makerId=" + encodeURIComponent("" + makerId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMessagesGET(_response));
        });
    }

    protected processMessagesGET(response: AxiosResponse): Promise<GetMessagesResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetMessagesResponse.fromJS(resultData200);
            return Promise.resolve<GetMessagesResponse>(result200);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ErrorResponse.fromJS(resultData404);
            return throwException("chat not found", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetMessagesResponse>(null as any);
    }

    /**
     * Send message
     * @param body Send message request
     * @return success response
     */
    messagesPOST(body: SendMessageRequest, signal?: AbortSignal): Promise<SuccessResponse> {
        let url_ = this.baseUrl + "/api/chats/:chatId/messages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            signal
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMessagesPOST(_response));
        });
    }

    protected processMessagesPOST(response: AxiosResponse): Promise<SuccessResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SuccessResponse.fromJS(resultData200);
            return Promise.resolve<SuccessResponse>(result200);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ErrorResponse.fromJS(resultData404);
            return throwException("chat not found", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SuccessResponse>(null as any);
    }
}

export class MakersRepository extends BaseApi {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        super();

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? this.getBaseUrl("");

    }

    /**
     * Set github link
     * @param body Set github link request
     * @return success response
     */
    updateGithubLink(body: SetLinkRequest, signal?: AbortSignal): Promise<SuccessResponse> {
        let url_ = this.baseUrl + "/api/makers/updateGithubLink";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            signal
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdateGithubLink(_response));
        });
    }

    protected processUpdateGithubLink(response: AxiosResponse): Promise<SuccessResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SuccessResponse.fromJS(resultData200);
            return Promise.resolve<SuccessResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SuccessResponse>(null as any);
    }

    /**
     * Get makers
     * @param zipCode (optional) zip code
     * @param keywords (optional) keywords
     * @return success response
     */
    makers(zipCode: string | undefined, keywords: string | undefined, signal?: AbortSignal): Promise<GetMakersResponse> {
        let url_ = this.baseUrl + "/api/makers?";
        if (zipCode === null)
            throw new Error("The parameter 'zipCode' cannot be null.");
        else if (zipCode !== undefined)
            url_ += "zipCode=" + encodeURIComponent("" + zipCode) + "&";
        if (keywords === null)
            throw new Error("The parameter 'keywords' cannot be null.");
        else if (keywords !== undefined)
            url_ += "keywords=" + encodeURIComponent("" + keywords) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMakers(_response));
        });
    }

    protected processMakers(response: AxiosResponse): Promise<GetMakersResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetMakersResponse.fromJS(resultData200);
            return Promise.resolve<GetMakersResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetMakersResponse>(null as any);
    }

    /**
     * Get makers by name
     * @param searchString (optional) search string
     * @return success response
     */
    getMakersByName(searchString: string | undefined, signal?: AbortSignal): Promise<GetMakersByNameResponse[]> {
        let url_ = this.baseUrl + "/api/makers/getMakersByName?";
        if (searchString === null)
            throw new Error("The parameter 'searchString' cannot be null.");
        else if (searchString !== undefined)
            url_ += "searchString=" + encodeURIComponent("" + searchString) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetMakersByName(_response));
        });
    }

    protected processGetMakersByName(response: AxiosResponse): Promise<GetMakersByNameResponse[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetMakersByNameResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<GetMakersByNameResponse[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetMakersByNameResponse[]>(null as any);
    }

    /**
     * Get links by code
     * @param code (optional) code
     * @return success response
     */
    getLinksByCode(code: string | undefined, signal?: AbortSignal): Promise<SuccessResponse> {
        let url_ = this.baseUrl + "/api/makers/getLinksByCode?";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetLinksByCode(_response));
        });
    }

    protected processGetLinksByCode(response: AxiosResponse): Promise<SuccessResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SuccessResponse.fromJS(resultData200);
            return Promise.resolve<SuccessResponse>(result200);

        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = ErrorResponse.fromJS(resultData500);
            return throwException("error response", status, _responseText, _headers, result500);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SuccessResponse>(null as any);
    }

    /**
     * Get maker by id
     * @param makerId maker id
     * @return success response
     */
    makers2(makerId: number, signal?: AbortSignal): Promise<GetMakerResponse> {
        let url_ = this.baseUrl + "/api/makers/{makerId}";
        if (makerId === undefined || makerId === null)
            throw new Error("The parameter 'makerId' must be defined.");
        url_ = url_.replace("{makerId}", encodeURIComponent("" + makerId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMakers2(_response));
        });
    }

    protected processMakers2(response: AxiosResponse): Promise<GetMakerResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetMakerResponse.fromJS(resultData200);
            return Promise.resolve<GetMakerResponse>(result200);

        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = ErrorResponse.fromJS(resultData500);
            return throwException("error response", status, _responseText, _headers, result500);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetMakerResponse>(null as any);
    }

    /**
     * Get maker images
     * @param makerId maker id
     * @return success response
     */
    getMakerImages(makerId: number, signal?: AbortSignal): Promise<GetMakerImagesResponse> {
        let url_ = this.baseUrl + "/api/makers/getMakerImages/{makerId}";
        if (makerId === undefined || makerId === null)
            throw new Error("The parameter 'makerId' must be defined.");
        url_ = url_.replace("{makerId}", encodeURIComponent("" + makerId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetMakerImages(_response));
        });
    }

    protected processGetMakerImages(response: AxiosResponse): Promise<GetMakerImagesResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetMakerImagesResponse.fromJS(resultData200);
            return Promise.resolve<GetMakerImagesResponse>(result200);

        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = ErrorResponse.fromJS(resultData500);
            return throwException("error response", status, _responseText, _headers, result500);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetMakerImagesResponse>(null as any);
    }
}

export class UsersRepository extends BaseApi {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        super();

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? this.getBaseUrl("");

    }

    /**
     * Signup user
     * @param body Signup request
     * @return success response
     */
    signup(body: SignUpRequest, signal?: AbortSignal): Promise<SignResponse> {
        let url_ = this.baseUrl + "/api/users/signup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            signal
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSignup(_response));
        });
    }

    protected processSignup(response: AxiosResponse): Promise<SignResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
            result201 = SignResponse.fromJS(resultData201);
            return Promise.resolve<SignResponse>(result201);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("bad request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SignResponse>(null as any);
    }

    /**
     * Signin user
     * @param body Signin request
     * @return success response
     */
    signin(body: SignInRequest, signal?: AbortSignal): Promise<SignResponse> {
        let url_ = this.baseUrl + "/api/users/signin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            signal
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSignin(_response));
        });
    }

    protected processSignin(response: AxiosResponse): Promise<SignResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SignResponse.fromJS(resultData200);
            return Promise.resolve<SignResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("bad request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SignResponse>(null as any);
    }

    /**
     * Get user informations
     * @return success response
     */
    me(signal?: AbortSignal): Promise<GetMeResponse> {
        let url_ = this.baseUrl + "/api/users/me";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMe(_response));
        });
    }

    protected processMe(response: AxiosResponse): Promise<GetMeResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetMeResponse.fromJS(resultData200);
            return Promise.resolve<GetMeResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("bad request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetMeResponse>(null as any);
    }

    /**
     * Logout user
     * @return success response
     */
    logout(signal?: AbortSignal): Promise<SuccessResponse> {
        let url_ = this.baseUrl + "/api/users/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processLogout(_response));
        });
    }

    protected processLogout(response: AxiosResponse): Promise<SuccessResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SuccessResponse.fromJS(resultData200);
            return Promise.resolve<SuccessResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SuccessResponse>(null as any);
    }
}

/** TO COPY IN EACH RESPONSE FILE */
export class BaseResponse implements IBaseResponse {
    /** success */
    success!: boolean;
    /** statusCode */
    statusCode!: number | undefined;
    /** result */
    result!: any | undefined;

    [key: string]: any;

    constructor(data?: IBaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            this.result = _data["result"];
        }
    }

    static fromJS(data: any): BaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        data["result"] = this.result;
        return data;
    }
}

/** TO COPY IN EACH RESPONSE FILE */
export interface IBaseResponse {
    /** success */
    success: boolean;
    /** statusCode */
    statusCode: number | undefined;
    /** result */
    result: any | undefined;

    [key: string]: any;
}

/** SuccessReponse */
export class SuccessResponse implements ISuccessResponse {
    /** success */
    success!: boolean;
    /** statusCode */
    statusCode!: number | undefined;

    [key: string]: any;

    constructor(data?: ISuccessResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): SuccessResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SuccessResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        return data;
    }
}

/** SuccessReponse */
export interface ISuccessResponse {
    /** success */
    success: boolean;
    /** statusCode */
    statusCode: number | undefined;

    [key: string]: any;
}

/** ErrorResponse */
export class ErrorResponse implements IErrorResponse {
    /** success */
    success!: boolean;
    /** error */
    error!: string | undefined;
    /** statusCode */
    statusCode!: number | undefined;

    [key: string]: any;

    constructor(data?: IErrorResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.success = _data["success"];
            this.error = _data["error"];
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): ErrorResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["success"] = this.success;
        data["error"] = this.error;
        data["statusCode"] = this.statusCode;
        return data;
    }
}

/** ErrorResponse */
export interface IErrorResponse {
    /** success */
    success: boolean;
    /** error */
    error: string | undefined;
    /** statusCode */
    statusCode: number | undefined;

    [key: string]: any;
}

/** messages response */
export class GetMessagesResponse implements IGetMessagesResponse {
    /** id */
    id!: number;
    /** senderId */
    senderId!: number;
    /** chatId */
    chatId!: number;
    /** message */
    message!: string;
    /** isMine */
    isMine!: boolean;

    [key: string]: any;

    constructor(data?: IGetMessagesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.senderId = _data["senderId"];
            this.chatId = _data["chatId"];
            this.message = _data["message"];
            this.isMine = _data["isMine"];
        }
    }

    static fromJS(data: any): GetMessagesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetMessagesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["senderId"] = this.senderId;
        data["chatId"] = this.chatId;
        data["message"] = this.message;
        data["isMine"] = this.isMine;
        return data;
    }
}

/** messages response */
export interface IGetMessagesResponse {
    /** id */
    id: number;
    /** senderId */
    senderId: number;
    /** chatId */
    chatId: number;
    /** message */
    message: string;
    /** isMine */
    isMine: boolean;

    [key: string]: any;
}

/** Request for send message */
export class SendMessageRequest implements ISendMessageRequest {
    /** senderId */
    senderId!: number;
    /** message */
    message!: string;

    [key: string]: any;

    constructor(data?: ISendMessageRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.senderId = _data["senderId"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): SendMessageRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SendMessageRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["senderId"] = this.senderId;
        data["message"] = this.message;
        return data;
    }
}

/** Request for send message */
export interface ISendMessageRequest {
    /** senderId */
    senderId: number;
    /** message */
    message: string;

    [key: string]: any;
}

/** request for set link */
export class SetLinkRequest implements ISetLinkRequest {
    /** github link */
    githubLink!: string;
    /** link id */
    linkId!: number | undefined;

    [key: string]: any;

    constructor(data?: ISetLinkRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.githubLink = _data["githubLink"];
            this.linkId = _data["linkId"];
        }
    }

    static fromJS(data: any): SetLinkRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SetLinkRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["githubLink"] = this.githubLink;
        data["linkId"] = this.linkId;
        return data;
    }
}

/** request for set link */
export interface ISetLinkRequest {
    /** github link */
    githubLink: string;
    /** link id */
    linkId: number | undefined;

    [key: string]: any;
}

/** Response for get makers */
export class GetMakers implements IGetMakers {
    /** id */
    id!: number;
    name!: string | undefined;
    /** email */
    email!: string | undefined;
    /** zip code */
    zipCode!: string | undefined;
    /** city */
    city!: string | undefined;
    /** country */
    country!: string | undefined;
    /** images */
    images!: string[] | undefined;
    /** keywords */
    keywords!: string[] | undefined;
    /** distance */
    distance!: number | undefined;

    [key: string]: any;

    constructor(data?: IGetMakers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.zipCode = _data["zipCode"];
            this.city = _data["city"];
            this.country = _data["country"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(item);
            }
            if (Array.isArray(_data["keywords"])) {
                this.keywords = [] as any;
                for (let item of _data["keywords"])
                    this.keywords!.push(item);
            }
            this.distance = _data["distance"];
        }
    }

    static fromJS(data: any): GetMakers {
        data = typeof data === 'object' ? data : {};
        let result = new GetMakers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["zipCode"] = this.zipCode;
        data["city"] = this.city;
        data["country"] = this.country;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item);
        }
        if (Array.isArray(this.keywords)) {
            data["keywords"] = [];
            for (let item of this.keywords)
                data["keywords"].push(item);
        }
        data["distance"] = this.distance;
        return data;
    }
}

/** Response for get makers */
export interface IGetMakers {
    /** id */
    id: number;
    name: string | undefined;
    /** email */
    email: string | undefined;
    /** zip code */
    zipCode: string | undefined;
    /** city */
    city: string | undefined;
    /** country */
    country: string | undefined;
    /** images */
    images: string[] | undefined;
    /** keywords */
    keywords: string[] | undefined;
    /** distance */
    distance: number | undefined;

    [key: string]: any;
}

/** Response for get makers response */
export class GetMakersResponse implements IGetMakersResponse {
    /** success */
    success!: boolean;
    /** statusCode */
    statusCode!: number | undefined;
    /** result */
    result!: GetMakers[] | undefined;

    [key: string]: any;

    constructor(data?: IGetMakersResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(GetMakers.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetMakersResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetMakersResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        return data;
    }
}

/** Response for get makers response */
export interface IGetMakersResponse {
    /** success */
    success: boolean;
    /** statusCode */
    statusCode: number | undefined;
    /** result */
    result: GetMakers[] | undefined;

    [key: string]: any;
}

/** Response for get makers by name */
export class GetMakersByNameResponse implements IGetMakersByNameResponse {
    /** id */
    id!: number;
    name!: string | undefined;
    /** email */
    email!: string | undefined;
    /** zip code */
    zipCode!: string | undefined;
    /** city */
    city!: string | undefined;
    /** countryz */
    country!: string | undefined;

    [key: string]: any;

    constructor(data?: IGetMakersByNameResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.zipCode = _data["zipCode"];
            this.city = _data["city"];
            this.country = _data["country"];
        }
    }

    static fromJS(data: any): GetMakersByNameResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetMakersByNameResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["zipCode"] = this.zipCode;
        data["city"] = this.city;
        data["country"] = this.country;
        return data;
    }
}

/** Response for get makers by name */
export interface IGetMakersByNameResponse {
    /** id */
    id: number;
    name: string | undefined;
    /** email */
    email: string | undefined;
    /** zip code */
    zipCode: string | undefined;
    /** city */
    city: string | undefined;
    /** countryz */
    country: string | undefined;

    [key: string]: any;
}

/** Response for get maker */
export class GetMaker implements IGetMaker {
    /** id */
    id!: number;
    name!: string | undefined;
    /** email */
    email!: string | undefined;
    /** zip code */
    zipCode!: string | undefined;
    /** street */
    street!: string | undefined;
    /** street number */
    streetNumber!: string | undefined;
    /** city */
    city!: string | undefined;
    /** country */
    country!: string | undefined;

    [key: string]: any;

    constructor(data?: IGetMaker) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.zipCode = _data["zipCode"];
            this.street = _data["street"];
            this.streetNumber = _data["streetNumber"];
            this.city = _data["city"];
            this.country = _data["country"];
        }
    }

    static fromJS(data: any): GetMaker {
        data = typeof data === 'object' ? data : {};
        let result = new GetMaker();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["zipCode"] = this.zipCode;
        data["street"] = this.street;
        data["streetNumber"] = this.streetNumber;
        data["city"] = this.city;
        data["country"] = this.country;
        return data;
    }
}

/** Response for get maker */
export interface IGetMaker {
    /** id */
    id: number;
    name: string | undefined;
    /** email */
    email: string | undefined;
    /** zip code */
    zipCode: string | undefined;
    /** street */
    street: string | undefined;
    /** street number */
    streetNumber: string | undefined;
    /** city */
    city: string | undefined;
    /** country */
    country: string | undefined;

    [key: string]: any;
}

/** Response for get maker response */
export class GetMakerResponse implements IGetMakerResponse {
    /** success */
    success!: boolean;
    /** statusCode */
    statusCode!: number | undefined;
    /** result */
    result!: GetMaker | undefined;

    [key: string]: any;

    constructor(data?: IGetMakerResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            this.result = _data["result"] ? GetMaker.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMakerResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetMakerResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

/** Response for get maker response */
export interface IGetMakerResponse {
    /** success */
    success: boolean;
    /** statusCode */
    statusCode: number | undefined;
    /** result */
    result: GetMaker | undefined;

    [key: string]: any;
}

/** Response for get project */
export class Project implements IProject {
    /** id */
    id!: number;
    /** name */
    name!: string | undefined;
    /** images */
    images!: string[] | undefined;

    [key: string]: any;

    constructor(data?: IProject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(item);
            }
        }
    }

    static fromJS(data: any): Project {
        data = typeof data === 'object' ? data : {};
        let result = new Project();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item);
        }
        return data;
    }
}

/** Response for get project */
export interface IProject {
    /** id */
    id: number;
    /** name */
    name: string | undefined;
    /** images */
    images: string[] | undefined;

    [key: string]: any;
}

/** Response for get maker image */
export class GetMakerImages implements IGetMakerImages {
    /** sizesList */
    sizesList!: string[];
    /** projects */
    projectImages!: Project[];

    [key: string]: any;

    constructor(data?: IGetMakerImages) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sizesList = [];
            this.projectImages = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["sizesList"])) {
                this.sizesList = [] as any;
                for (let item of _data["sizesList"])
                    this.sizesList!.push(item);
            }
            if (Array.isArray(_data["projectImages"])) {
                this.projectImages = [] as any;
                for (let item of _data["projectImages"])
                    this.projectImages!.push(Project.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetMakerImages {
        data = typeof data === 'object' ? data : {};
        let result = new GetMakerImages();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.sizesList)) {
            data["sizesList"] = [];
            for (let item of this.sizesList)
                data["sizesList"].push(item);
        }
        if (Array.isArray(this.projectImages)) {
            data["projectImages"] = [];
            for (let item of this.projectImages)
                data["projectImages"].push(item.toJSON());
        }
        return data;
    }
}

/** Response for get maker image */
export interface IGetMakerImages {
    /** sizesList */
    sizesList: string[];
    /** projects */
    projectImages: Project[];

    [key: string]: any;
}

/** Response for get maker image */
export class GetMakerImagesResponse implements IGetMakerImagesResponse {
    /** success */
    success!: boolean;
    /** statusCode */
    statusCode!: number | undefined;
    /** result */
    result!: GetMakerImages | undefined;

    [key: string]: any;

    constructor(data?: IGetMakerImagesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            this.result = _data["result"] ? GetMakerImages.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMakerImagesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetMakerImagesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

/** Response for get maker image */
export interface IGetMakerImagesResponse {
    /** success */
    success: boolean;
    /** statusCode */
    statusCode: number | undefined;
    /** result */
    result: GetMakerImages | undefined;

    [key: string]: any;
}

/** Response for sign */
export class Sign implements ISign {
    /** First name */
    firstName!: string | undefined;
    /** Last name */
    lastName!: string | undefined;
    /** Email */
    email!: string | undefined;
    /** role */
    role!: number | undefined;
    /** token */
    token!: string | undefined;

    [key: string]: any;

    constructor(data?: ISign) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.role = _data["role"];
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): Sign {
        data = typeof data === 'object' ? data : {};
        let result = new Sign();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["role"] = this.role;
        data["token"] = this.token;
        return data;
    }
}

/** Response for sign */
export interface ISign {
    /** First name */
    firstName: string | undefined;
    /** Last name */
    lastName: string | undefined;
    /** Email */
    email: string | undefined;
    /** role */
    role: number | undefined;
    /** token */
    token: string | undefined;

    [key: string]: any;
}

/** Response for sign response */
export class SignResponse implements ISignResponse {
    /** success */
    success!: boolean;
    /** statusCode */
    statusCode!: number | undefined;
    /** result */
    result!: Sign | undefined;

    [key: string]: any;

    constructor(data?: ISignResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            this.result = _data["result"] ? Sign.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SignResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SignResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

/** Response for sign response */
export interface ISignResponse {
    /** success */
    success: boolean;
    /** statusCode */
    statusCode: number | undefined;
    /** result */
    result: Sign | undefined;

    [key: string]: any;
}

/** Request for sign up */
export class SignUpRequest implements ISignUpRequest {
    /** First name */
    firstName!: string;
    /** Last name */
    lastName!: string;
    /** Email */
    email!: string;
    /** Password */
    password!: string;
    /** Street */
    street!: string | undefined;
    /** Street number */
    streetNumber!: string | undefined;
    /** Zip code */
    zipCode!: string | undefined;
    /** City */
    city!: string | undefined;
    /** Country */
    country!: string | undefined;
    /** Role */
    role!: number | undefined;

    [key: string]: any;

    constructor(data?: ISignUpRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.firstName = _data["FirstName"];
            this.lastName = _data["lastName"];
            this.email = _data["Email"];
            this.password = _data["Password"];
            this.street = _data["Street"];
            this.streetNumber = _data["StreetNumber"];
            this.zipCode = _data["ZipCode"];
            this.city = _data["City"];
            this.country = _data["Country"];
            this.role = _data["Role"];
        }
    }

    static fromJS(data: any): SignUpRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SignUpRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["FirstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["Email"] = this.email;
        data["Password"] = this.password;
        data["Street"] = this.street;
        data["StreetNumber"] = this.streetNumber;
        data["ZipCode"] = this.zipCode;
        data["City"] = this.city;
        data["Country"] = this.country;
        data["Role"] = this.role;
        return data;
    }
}

/** Request for sign up */
export interface ISignUpRequest {
    /** First name */
    firstName: string;
    /** Last name */
    lastName: string;
    /** Email */
    email: string;
    /** Password */
    password: string;
    /** Street */
    street: string | undefined;
    /** Street number */
    streetNumber: string | undefined;
    /** Zip code */
    zipCode: string | undefined;
    /** City */
    city: string | undefined;
    /** Country */
    country: string | undefined;
    /** Role */
    role: number | undefined;

    [key: string]: any;
}

/** Request for sign in */
export class SignInRequest implements ISignInRequest {
    /** Email */
    email!: string;
    /** Password */
    password!: string;

    [key: string]: any;

    constructor(data?: ISignInRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.email = _data["Email"];
            this.password = _data["Password"];
        }
    }

    static fromJS(data: any): SignInRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SignInRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["Email"] = this.email;
        data["Password"] = this.password;
        return data;
    }
}

/** Request for sign in */
export interface ISignInRequest {
    /** Email */
    email: string;
    /** Password */
    password: string;

    [key: string]: any;
}

/** object me */
export class GetMe implements IGetMe {
    /** First name */
    firstName!: string;
    /** Last name */
    lastName!: string;
    /** Email */
    email!: string;
    /** role */
    role!: number | undefined;

    [key: string]: any;

    constructor(data?: IGetMe) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.role = _data["role"];
        }
    }

    static fromJS(data: any): GetMe {
        data = typeof data === 'object' ? data : {};
        let result = new GetMe();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["role"] = this.role;
        return data;
    }
}

/** object me */
export interface IGetMe {
    /** First name */
    firstName: string;
    /** Last name */
    lastName: string;
    /** Email */
    email: string;
    /** role */
    role: number | undefined;

    [key: string]: any;
}

/** Response for get me */
export class GetMeResponse implements IGetMeResponse {
    /** success */
    success!: boolean;
    /** statusCode */
    statusCode!: number | undefined;
    /** result */
    result!: GetMe | undefined;

    [key: string]: any;

    constructor(data?: IGetMeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.success = _data["success"];
            this.statusCode = _data["statusCode"];
            this.result = _data["result"] ? GetMe.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetMeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["success"] = this.success;
        data["statusCode"] = this.statusCode;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

/** Response for get me */
export interface IGetMeResponse {
    /** success */
    success: boolean;
    /** statusCode */
    statusCode: number | undefined;
    /** result */
    result: GetMe | undefined;

    [key: string]: any;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}